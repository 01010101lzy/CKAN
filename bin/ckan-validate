#!/usr/bin/perl
use 5.010;
use strict;
use warnings;
use FindBin qw($Bin);
use JSON::PP;

# This uses the JSON Schema Validator from
# https://github.com/fge/json-schema-validator
#
# (LGPLv3 and ASL 2.0)

my (@files) = @ARGV;

@files or die "Usage: $0 filenames\n";

my $SCHEMA_FILE   = "$Bin/../CKAN.schema";
my $VALIDATOR_JAR = "$Bin/json-schema-validator-2.2.5-lib.jar";

system('java', '-jar', $VALIDATOR_JAR, $SCHEMA_FILE, @files);

# Pass through failure status if applicable. This is great for travis.
$? and die "\nOne or more files failed to validate\n";

# Let's get ready to do our own tests.

my $json = JSON::PP->new;
my $schema = $json->decode( slurp($SCHEMA_FILE) );
my $errors = 0;

# Find all the top-level keys in our schema

my @allowed_fields = keys %{ $schema->{properties} };

# Now walk all our files, and see if there's anything which is
# *not* in our fields list.

foreach my $file (@files) {
    my $ckan = $json->decode( slurp($file) );

    $errors += test_extra_fields(\@allowed_fields, $ckan, $file);
}

# Exit with the number of errors found. A zero means we passed!
exit $errors; 

# ----- Nothing past here but subroutines -----

sub test_extra_fields {
    my ($allowed_fields, $ckan, $filename) = @_;
    my $errors = 0;

    # Produce a list of top-level fields in our CKAN file.
    my @ckan_fields = keys %$ckan;

    # Remove any `x_foo` fields, they're x_tensions, and totally allowed.
    @ckan_fields = grep { ! /^x_/ } @ckan_fields;

    # Load our fields into a set (a hash with keys, but no values)

    my %ckan_set;
    @ckan_set{@ckan_fields} = ();

    # Now take everything in our list of fields we see in our CKAN
    # file, and remove everything that's allowed by our schema. If
    # there's anything left, that's paddling.

    delete @ckan_set{ @$allowed_fields };

    foreach my $forbidden (keys %ckan_set) {
        say "Invalid field '$forbidden' in $filename";
        $errors++;
    }

    # TODO: Do the same with sub-fields.

    return $errors;
}

# Slurp a file into a string.
sub slurp {
    my ($filename) = @_;

    local $/;   # Disable input record separator

    open(my $fh, '<', $filename);

    return <$fh>;   # Slurp entire file to string
}
